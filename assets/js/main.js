import './config';
import * as Sentry from '@sentry/browser';
import { Vue as SentryVue } from '@sentry/integrations';
import Vue from 'vue';
import FontFaceObserver from 'fontfaceobserver/fontfaceobserver.standalone.js';
import analytics from './analytics';

Sentry.init({
    dsn: 'https://53aa5923a25c43cd9a645d9207ae5b6c@sentry.io/226416',
    environment: window.AppConfig.environment,
    ignoreErrors: [
        'fb_xd_fragment',
        /ReferenceError:.*/,
        // Error generated by a autofill function of Chrome for iOS
        // https://github.com/getsentry/sentry/issues/5267
        /Blocked a frame with origin/,
        // Frequent error caused by slow connections loading webpack code-split chunks
        // The only real fix is to reload the page when this happens but the site
        // remains functional and usable without JavaScript in any case
        /ChunkLoadError/,
    ],
    integrations(integrations) {
        // eslint-disable-next-line
        if (process.env.NODE_ENV === 'production') {
            integrations.push(new SentryVue({ Vue }));
        }
        return integrations;
    },
});

if (!sessionStorage.fontsLoaded) {
    Promise.all([
        new FontFaceObserver('caecilia').load(),
        new FontFaceObserver('caecilia-sans-text').load(),
    ])
        .then(function () {
            document.documentElement.className += ' ' + 'fonts-loaded';
            sessionStorage.fontsLoaded = true;
        })
        .catch((error) => {
            Sentry.withScope((scope) => {
                scope.setLevel('info');
                scope.setContext('message', error);
                Sentry.captureMessage('Fonts failed to load');
            });
        });
}

import(/* webpackChunkName: "common" */ './common/index').then((common) => {
    common.init();
});

import(/* webpackChunkName: "vue-apps" */ './vue-apps/index').then(
    (vueApps) => {
        vueApps.init();
    }
);

function shouldInitAnalytics() {
    const isDoNotTrack =
        window.doNotTrack === '1' ||
        window.navigator.doNotTrack === '1' ||
        window.navigator.msDoNotTrack === '1';

    // If the user hasn't consented to all cookies, we don't enable GA or other tracking.
    if(localStorage.getItem('tnlcommunityfund:cookie-consent') != 'all')
        return false;

    if (window.AppConfig.environment === 'production') {
        /*
         * In production, disable analytics outside
         * of the real domain to avoid polluting data.
         */
        return (
            window.location.hostname === 'www.tnlcommunityfund.org.uk' &&
            isDoNotTrack === false
        );
    } else {
        return isDoNotTrack === false;
    }
}

if (shouldInitAnalytics() === true) {
    analytics.init();
}


// RECITE ME

var serviceUrl = "//api.reciteme.com/asset/js?key=";
var serviceKey = "ecb9ea5249a43ddce8065e1aa550f12a6e682799";
var options = {};  // Options can be added as needed
var autoLoad = false;
var enableFragment = "#reciteEnable";
var loaded = [], frag = !1; window.location.hash === enableFragment && (frag = !0); function loadScript(c, b) { var a = document.createElement("script"); a.type = "text/javascript"; a.readyState ? a.onreadystatechange = function () { if ("loaded" == a.readyState || "complete" == a.readyState) a.onreadystatechange = null, void 0 != b && b() } : void 0 != b && (a.onload = function () { b() }); a.src = c; document.getElementsByTagName("head")[0].appendChild(a) } function _rc(c) { c += "="; for (var b = document.cookie.split(";"), a = 0; a < b.length; a++) { for (var d = b[a]; " " == d.charAt(0);)d = d.substring(1, d.length); if (0 == d.indexOf(c)) return d.substring(c.length, d.length) } return null } function loadService(c) { for (var b = serviceUrl + serviceKey, a = 0; a < loaded.length; a++)if (loaded[a] == b) return; loaded.push(b); loadScript(serviceUrl + serviceKey, function () { "function" === typeof _reciteLoaded && _reciteLoaded(); "function" == typeof c && c(); Recite.load(options); Recite.Event.subscribe("Recite:load", function () { Recite.enable() }) }) } "true" == _rc("Recite.Persist") && loadService(); if (autoLoad && "false" != _rc("Recite.Persist") || frag) document.addEventListener ? document.addEventListener("DOMContentLoaded", function (c) { loadService() }) : loadService();

document.addEventListener("DOMContentLoaded", function(event) {
    document.getElementById('enableRecite').addEventListener("click", function() {
        loadService();
    });
});
