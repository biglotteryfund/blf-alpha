/* =========================================================================
   Button
   ========================================================================= */

$btnConf: (
    'default': (
        'fontSize': 18px,
        'desiredHeight': 59px
    ),
    'medium': (
        'fontSize': 16px,
        'desiredHeight': 42px
    ),
    'small': (
        'fontSize': 16px,
        'desiredHeight': 36px
    ),
    'mini': (
        'fontSize': 13px,
        'desiredHeight': 30px
    )
);

$buttonColor: get-color('brand', 'primary');
$buttonColorInteract: get-color('brand', 'secondary-burgundy');
$buttonColorDarker: #DB0079; // Passes contrast a11y tests for use with smaller text

@mixin getBtnVertPadding($conf) {
    $height: map-get($conf, 'desiredHeight');
    $fontSize: map-get($conf, 'fontSize');
    $paddingVertical: ($height - $fontSize) / 2;
    padding-top: $paddingVertical;
    padding-bottom: $paddingVertical;
}

/* =========================================================================
   Buttons: Variants
   ========================================================================= */

/**
 * Buttons: Default style
 */
.btn {
    font-family: font-stack('display');
    line-height: 1; // so we can calculate padding for the height
    font-weight: font-weight('display', 'semibold');
    color: white;
    background-color: $buttonColor;
    text-decoration: none;
    border: none;
    border-radius: 50px;
    vertical-align: top;
    display: inline-block;
    -webkit-appearance: none;
    font-size: map-deep-get($btnConf, 'default', 'fontSize');
    @include getBtnVertPadding(map-get($btnConf, 'default'));
    padding-left: $spacingUnit;
    padding-right: $spacingUnit;

    @include mq('medium') {
        text-align: center;
    }

    @include mq('large') {
        padding-right: $spacingUnit * 1.5;
        padding-left: $spacingUnit * 1.5;
    }

    @include on-interact {
        color: white;
        background-color: $buttonColorInteract;
        outline: none;
    }

    // sass magic: becomes `a.btn`
    // (to override other link CSS)
    @at-root a#{&} {
        color: white;
        text-decoration: none;
        transition: none;
    }

    &[disabled='disabled'] {
        @include disabledBtn();
    }

    .btn__icon,
    .btn__icon-right {
        vertical-align: middle;
        display: inline-block;
        line-height: 1;
        margin-right: 0.5em;
        margin-left: -5px; // Optically align
    }

    .btn__icon-right {
        margin-left: 0.5em;
        margin-right: -5px; // Optically align
    }
}

/**
 * Buttons: Medium Variant
 */
.btn--medium {
    @include getBtnVertPadding(map-get($btnConf, 'mini'));
    font-size: map-deep-get($btnConf, 'mini', 'fontSize');
    background-color: get-color('brand', 'primary');

    @media only screen and (min-width: 360px) {
        @include getBtnVertPadding(map-get($btnConf, 'small'));
        font-size: map-deep-get($btnConf, 'small', 'fontSize');
    }

    @include mq('medium') {
        @include getBtnVertPadding(map-get($btnConf, 'medium'));
        font-size: map-deep-get($btnConf, 'medium', 'fontSize');
    }

    @include on-interact {
        background-color: $buttonColorInteract;
        outline: none;
    }
}

/**
 * Buttons: Small Variant
 */
.btn--small {
    @include getBtnVertPadding(map-get($btnConf, 'mini'));
    font-size: map-deep-get($btnConf, 'mini', 'fontSize');
    background-color: get-color('brand', 'primary');

    @media only screen and (min-width: 360px) {
        @include getBtnVertPadding(map-get($btnConf, 'small'));
        font-size: map-deep-get($btnConf, 'small', 'fontSize');
    }

    @include on-interact {
        background-color: $buttonColorInteract;
        outline: none;
    }
}

/**
 * Buttons: Reversed Variant
 */
.btn.btn--reversed {
    color: white;
    background-color: get-color('brand', 'secondary-blue');
    font-weight: font-weight('display', 'semibold');
}

/**
 * Button: Outline variant
 */
.btn.btn--outline {
    background-color: transparent !important;
    color: $buttonColorDarker !important;
    border: 3px solid $buttonColorDarker;

    @include on-interact {
        background-color: transparent;
        border-color: $buttonColorInteract;
        color: $buttonColorInteract !important;
    }
}

/**
 * Buttons: Warning Variant
 */
.btn.btn--warning {
    color: get-color('message', 'warning') !important;
    background-color: get-color('message', 'warning');
    border-color: get-color('message', 'warning') !important;
}

@function arrow-btn($color) {
    @return svg-url(
        '<svg xmlns="http://www.w3.org/2000/svg" width="313" height="116"><path fill-rule="evenodd" fill="#{$color}" d="M310.864 66.378c-2.431 2.29-48.785 44.819-52.957 48.701-.339.316-.825.527-1.407.648V116h-199C25.744 116 0 90.256 0 58.5S25.744 1 57.5 1h192.481c1.936-.314 4.011-.317 5.595 0h.924v.244c.533.178.973.403 1.27.68 2.891 2.705 51.163 47.189 53.158 49.056 2.587 2.42 2.971 12.543-.064 15.398z"></path></svg>'
    );
}

.btn--next {
    background-image: arrow-btn($buttonColor);
    background-size: 100% auto; // allow longer text
    background-repeat: no-repeat;
    background-position: center left;
    min-width: 158px;
    padding-right: 40px;
    background-color: transparent;

    @include on-interact {
        background-color: transparent;
        background-image: arrow-btn($buttonColorInteract);
    }
}

.icon-btn {
    padding: 0;
    outline: none;
    background: transparent;

    border-radius: 100%;
    border: 1px solid white;
    height: 25px;
    width: 25px;
    cursor: pointer;

    @include on-interact() {
        opacity: 0.8;
    }

    svg {
        fill: white;
        height: 100%;
        width: 100%;
    }
}

/* =========================================================================
   Link Buttons
   ========================================================================= */

.btn-link {
    color: get-color('links', 'base');
    background-color: transparent;
    transition: color 0.1s ease-in-out;
    margin: 0;
    padding: 0;
    font-weight: font-weight('body', 'semibold');
    text-decoration: underline;
    border: none;
    border-radius: 0;
    cursor: inherit;
    text-align: inherit;
    word-wrap: break-word;
    white-space: normal;

    &:active,
    &:focus {
        outline: none;
    }

    @include on-interact {
        text-decoration: underline;
        color: get-color('links', 'hover');
        background-color: transparent;
    }
}

/* =========================================================================
   Language Controls
   ========================================================================= */

.language-control {
    font-family: font-stack('display');
    font-size: 14px;
    font-weight: font-weight('display', 'semibold');
    text-align: center;
    text-decoration: none;
    border-radius: 50px;
    -webkit-appearance: none;
    display: inline-block;
    vertical-align: top;
    line-height: 1;
    color: currentColor;
    background-color: transparent;
    border: 2px solid currentColor;
    padding: 8px 20px 9px;
    margin-right: 0.5em;

    .icon--tick {
        vertical-align: middle;
        width: 16px;
        height: 16px;
        margin-right: 2px;
        // Optical alignment
        margin-left: -2px;
        position: relative;
        top: -1px;
    }

    &.is-current {
        pointer-events: none;
    }

    &:not(.is-current) {
        @include on-interact {
            text-decoration: none;
            color: get-color('text', 'base');
            background-color: white;
            border-color: white;
        }
    }
}

/* =========================================================================
   Start Button
   ========================================================================= */
/* Button container for service start buttons */

.start-button {
    margin: 1.5em 0;
}

/* =========================================================================
   Button Group
   ========================================================================= */
/* Group together a set of buttons with consistent spacing */

/**
 * Button group
 * Groups together a set of inline buttons with horizontal spacing
 */
.o-button-group {
    .btn {
        margin-bottom: ($spacingUnit / 2);

        &:last-of-type {
            margin-bottom: 0;
        }

        @media only screen and (max-width: 680px) {
            max-width: 320px;
            width: 100%;
        }

        @media only screen and (min-width: 680px) {
            margin-right: ($spacingUnit / 2);

            &:last-of-type {
                margin-right: 0;
            }
        }
    }
}

/**
 * Button group separated left
 * Allows a set of buttons to be split from other buttons
 * with a divider on their left
 */
.o-button-group-separated {
    display: inline-block;

    &.o-button-group-separated--left {
        border-left: 1px solid get-color('border', 'base');
        padding-left: $spacingUnit;
        margin-left: $spacingUnit;
    }

    &.o-button-group-separated--right {
        border-right: 1px solid get-color('border', 'base');
        padding-right: $spacingUnit;
        margin-right: $spacingUnit;
    }
}

/**
 * Button group block
 * Groups together a set of block buttons with vertical spacing
 */
.o-button-group-block {
    .btn {
        display: block;
        width: 100%;
        margin-bottom: $spacingUnit;

        &:last-of-type {
            margin-bottom: 0;
        }
    }
}

/**
 * Button group flex
 * Groups together a set of buttons which flex to fit available space
 */
.o-button-group-flex {
    @include mq('medium') {
        display: flex;
        flex-flow: row wrap;
        margin: -10px 0 $spacingUnit -10px;
        justify-content: center;
    }

    .btn {
        display: block;
        width: 100%;
        margin-bottom: $spacingUnit;

        @include mq('medium') {
            width: auto;
            flex: 1 1 0;
            margin: 10px 0 0 10px;
            // Setting whitespace & max-width values
            // allow long buttons to wrap but not over-stretch.
            max-width: 35em;
            white-space: nowrap;
        }
    }
}



.btn--save {
    // Update the .js-save-btn timings in forms.js if changing these values
    $iconAnimationDuration: 0.3s;
    $dotAnimationDuration: 0.3s;

    // Override this otherwise clicks keep the button with its active colour
    // which fails a11y tests
    &:active {
        background-color: $buttonColor;
    }

    width: 320px; // to allow for Welsh

    // Animation to bob the save icon into view
    @keyframes save-icon {
        0% {
            transform: scale(0.4);
            top: 0;
        }
        50% {
            top: -10px;
        }
        100% {
            transform: scale(1.0);
            top: 0;
        }
    }

    // Animation to toggle the appearance of loading dots
    @keyframes appear {
        100% {
            opacity: 1;
        }
    }

    // Hide the save/tick icon by default
    .btn--save__icon {
        transition: all $iconAnimationDuration ease-in;
        visibility: hidden;
        position: relative;
    }

    .btn--save__dots {
        span {
            display: inline;
            opacity: 0;
        }
    }

    // Show each dot one-by-one after a delay when loading
    &.is-loading {
        .btn--save__dots span {
            animation-name: appear;
            animation-duration: $dotAnimationDuration;
            animation-iteration-count: 1;
            animation-fill-mode: forwards;
        }
        @for $i from 1 through 3 {
            .btn--save__dots span:nth-child(#{$i}) {
                animation-delay: ($i * $dotAnimationDuration);
            }
        }
    }

    // When the dots have loaded, replace them with a new button
    &.is-complete {
        background-color: #4a9e2e;

        // Hide the dots
        .btn--save__dots {
            visibility: hidden;
        }

        // Trigger the icon animation
        .btn--save__icon {
            visibility: visible;
            animation-name: save-icon;
            animation-duration: $iconAnimationDuration;
            animation-iteration-count: 1;
        }
    }
}
