// =========================================================================
// Functions
// ========================================================================= //

// =========================================================================
// Functions: Colour
// ========================================================================= //

/**
 * Get color from palette w/default tone
 */
@function get-color($palette, $tone) {
    @return map-get(map-get($colors, $palette), $tone);
}

// =========================================================================
// Functions: Typography
// ========================================================================= //

@function font-stack($category, $variant: 'default') {
    $value: unquote(
        map-deep-get($typography, $category, 'font-stacks', $variant)
    );
    @if type-of($value) == string {
        @return $value;
    } @else {
        @error "No value found for #{$category}/#{$variant}";
    }
}

@function font-weight($category, $variant) {
    $value: map-deep-get($typography, $category, 'weights', $variant);
    @if type-of($value) == number {
        @return $value;
    } @else {
        @error "No value found for #{$category}/#{$variant}";
    }
}

@function font-scale($category, $variant) {
    $value: map-deep-get($typography, $category, 'font-scale', $variant);
    @if type-of($value) == number {
        @return $value;
    } @else {
        @error "No value found for #{$category}/#{$variant}";
    }
}

// =========================================================================
// Functions: Utilities
// ========================================================================= //

// via http://stackoverflow.com/a/34982673
@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @if $digits > 0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(
                str-slice($string, $index + str-length($search)),
                $search,
                $replace
            );
    }

    @return $string;
}

/// https://github.com/waldemarfm/sass-svg-uri/blob/master/_svg-uri.scss
/// A small function allowing skipping base64 encoding
/// and simply pasting the SVG markup right in the CSS.
/// @author Jakob Eriksen
/// @link http://codepen.io/jakob-e/pen/doMoML
/// @param {String} $svg - SVG image to encode
/// @return {String} - Encoded SVG data uri
@function svg-url($svg) {
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url('data:image/svg+xml,#{$encoded}');
}
