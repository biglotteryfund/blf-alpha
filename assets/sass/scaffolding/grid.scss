$paddedGridGutter: 10px;
$paddedGridGutterLarge: 30px;

.grid {
    display: flex;
    align-items: center;

    > .grid__item {
        flex-grow: 1;
        flex-shrink: 0;
        flex-basis: 0;

        &.grid__item--half {
            max-width: 50%;
        }
    }

    > .grid__item--large {
        flex-grow: 2;
    }

    &.grid--equal {
        align-items: stretch;
    }

    &.grid--top {
        align-items: flex-start;
    }

    &.grid--wide-only {
        @include mq('tablet', 'max') {
            display: block;
            margin-left: 0 !important;

            > .grid__item {
                max-width: 100% !important;
                margin-left: 0 !important;
                overflow: hidden;
                width: auto !important;
            }
        }
    }

    &.grid--padded {
        margin-left: -$paddedGridGutter;

        > .grid__item {
            margin-left: $paddedGridGutter;
            margin-bottom: $spacingUnit;
        }
    }

    &.grid--padded--large {
        margin-left: -$paddedGridGutterLarge;

        > .grid__item {
            margin-left: $paddedGridGutterLarge;
            margin-bottom: $paddedGridGutterLarge;
        }
    }

    // output grid cols for 2-up, 3-up etc
    @for $i from 2 through 4 {
        // we round this number down to fix IE11 bugs in the grid
        $colWidth: decimal-round(100% / $i, 0, floor);

        &.grid--#{$i}-up {
            flex-wrap: wrap;

            > .grid__item {
                flex-basis: $colWidth;
                width: $colWidth;
            }

            &.grid--padded {
                > .grid__item {
                    flex-basis: calc(#{$colWidth} - #{$paddedGridGutter});
                    max-width: calc(#{$colWidth} - #{$paddedGridGutter});
                }
            }

            &.grid--padded--large {
                > .grid__item {
                    flex-basis: calc(#{$colWidth} - #{$paddedGridGutterLarge});
                    max-width: calc(#{$colWidth} - #{$paddedGridGutterLarge});
                }
            }

            &.grid--bordered {
                $borderColour: #94aee5;

                @include mq('tablet', 'max') {
                    > .grid__item {
                        border-bottom: 4px solid $borderColour;
                    }
                }
                @include mq('tablet') {
                    > .grid__item {
                        border-top: 1px solid $borderColour;
                        border-right: 1px solid $borderColour;

                        // some magic to alternate border colours
                        &:nth-child(odd) {
                            &:after {
                                border-left-color: palette('blue');
                            }
                        }
                        &:nth-child(even) {
                            &:after {
                                border-left-color: palette('pink');
                            }
                        }

                        &:nth-child(-n + #{$i}) {
                            border-top: none;
                        }

                        &:nth-child(#{$i}n) {
                            border-right: none;
                        }

                        // internal border
                        &:nth-child(#{$i}n + 1) {
                            $desiredHeight: 50%;
                            $desiredWidth: 4px;
                            &:after {
                                position: relative;
                                display: block;
                                content: '';
                                left: 0;
                                height: $desiredHeight;
                                top: #{ (100% - $desiredHeight) / 2};
                                border-left-style: solid;
                                border-left-width: $desiredWidth;
                                width: $desiredWidth;
                            }

                            // when used inside a content box,
                            // the border should be 15px outside
                            .content-box & {
                                &:after {
                                    left: -#{ $spacingUnit + 15px};
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

.grid__item__inner {
    position: relative;
    height: 100%;
}

.grid__item__overlay {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.8);
    color: #ffffff;
    width: 100%;
    height: 100%;
    z-index: 10;
    padding: $spacingUnit * 2;
}

.grid__item__inner--flex {
    height: auto;
}

@media print {
    .grid {
        display: block !important;
        margin: 0 !important;
    }
    .grid__item {
        display: block !important;
        width: 100% !important;
        max-width: 100% !important;
        margin: 0 !important;
    }
}

$num_columns: 12;
$num_columns_mobile: 3;

@mixin generate-column($className, $width) {
    #{$className} {
        flex-basis: $width;
        flex-grow: 0;

        .grid--padded & {
            flex-basis: calc(#{$width} - #{$paddedGridGutter});
        }

        .grid--padded--large & {
            flex-basis: calc(#{$width} - #{$paddedGridGutterLarge});
        }
    }
}

.grid-row {
    flex-wrap: wrap;
}

@include mq('tablet', 'max') {
    @for $i from 1 through $num_columns_mobile {
        $width: $i / $num_columns_mobile * 100%;
        .grid__item {
            @include generate-column('&.grid-col-#{$i}--m', $width);
        }
    }
}

@include mq('tablet') {
    @for $i from 1 through $num_columns {
        $width: $i / $num_columns * 100%;
        .grid__item {
            @include generate-column('&.grid-col-#{$i}', $width);
        }
    }
}

/* =========================================================================
   Flex Grid
   ========================================================================= */
/**
 * Simple 2up and 3up flexible grid which stacks on small screens
 * @TODO: Review existing .grid styles to work out how to share approaches
 */
 $flexGridSpacing: $spacingUnit / 2;
.flex-grid {
    @include reset-list();

    @include mq(medium-minor) {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        margin: (-$flexGridSpacing) 0 0 (-$flexGridSpacing);
    }

    > .flex-grid__item {
        max-width: 100%;
        margin-bottom: $flexGridSpacing;

        @include mq(medium-minor) {
            display: flex;
            flex: 1 1 0%;

            > * {
                margin: $flexGridSpacing 0 0 $flexGridSpacing;
            }
        }
    }
}
.flex-grid--3up .flex-grid__item {
    @include mq(medium-minor) {
        flex: 0 0 33.3%;
    }
}
