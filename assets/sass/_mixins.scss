/* =========================================================================
   Mixins
   ========================================================================= */

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@mixin responsive-ratio($x, $y) {
    $padding: ($y / $x) * 100;
    padding-bottom: unquote(decimal-round($padding, 1, ceil) + '%');
}

// via http://simplyaccessible.com/article/three-pitfalls-text-alternatives/
@mixin visually-hidden() {
    @media screen {
        color: #000000;
        background-color: #ffffff;
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        width: 1px;
        margin: -1px;
        padding: 0;
        overflow: hidden;
        position: absolute;
    }
}

@mixin clearfix() {
    &:before,
    &:after {
        content: ' ';
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin reset-list() {
    list-style: none;
    margin: 0;
    padding: 0;
}

@mixin on-interact {
    &:active,
    &:focus,
    &:hover {
        @content;
    }
}

@mixin font-and-leading($fontSize, $leading) {
    font-size: $fontSize;
    line-height: relative-line-height($fontSize, $leading);
}

// layout helper: used within a containing element
// to center it according to the grid
@mixin responsiveGutter($skipMargins: false) {
    $defaultGutter: map-get($gutters, 'default');
    @if not $skipMargins {
        margin-left: $defaultGutter;
        margin-right: $defaultGutter;
    }
    width: calc(100% - #{$defaultGutter * 2});

    @each $device, $gutter in $gutters {
        @if map-has-key($breakpoints, $device) {
            @include mq($device) {
                @if not $skipMargins {
                    margin-left: $gutter;
                    margin-right: $gutter;
                }
                width: calc(100% - #{$gutter * 2});
            }
        }
    }

    @media screen and (min-width: $widestScreen) {
        // eg. 80% of the max
        width: #{$widestScreen / 100 * 80};
        @if not $skipMargins {
            height: 100%;
            margin-left: auto;
            margin-right: auto;
        }
    }
}

// @TODO: Replace with function
@mixin poppins() {
    font-family: font-stack('display');
}

// @TODO: Replace with function
@mixin roboto() {
    font-family: font-stack('body');
}

@mixin disabledBtn() {
    background-color: grey !important;
    @include on-interact {
        background-color: grey !important;
    }
}

@mixin text-caption() {
    color: palette('charcoal-note');
    font-size: 14px;
    margin: 0.5em 0;
}

@mixin bordered() {
    border: 1px solid rgba(202, 202, 202, 0.5);
}

@mixin underlined() {
    content: '';
    display: block;
    width: 80px;
    padding-top: 10px;
    border-bottom: 3px solid;
}

@mixin fullwidth() {
    width: 100vw;
    position: relative;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
}

@mixin downloadIcon() {
    background-repeat: no-repeat;
    background-position: left 6px;
    padding-left: 20px;
    margin-left: 2px;
    background-size: 14px;
    background-image: svg-url(
        '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32"><path d="M27.414 19.414l-10 10a2 2 0 0 1-2.828 0l-10-10a2 2 0 1 1 2.828-2.828L14 23.172V4a2 2 0 1 1 4 0v19.172l6.586-6.586c.39-.39.902-.586 1.414-.586s1.024.195 1.414.586a2 2 0 0 1 0 2.828z" fill="#1a44a1"/></svg>'
    );
}

@mixin linkIcon() {
    background-repeat: no-repeat;
    background-position: right 6px;
    padding-right: 20px;
    margin-right: 2px;
    background-size: 12px;
    background-image: svg-url(
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="32"><path d="M20 24H4V8.06L8 8V4H0v24h24V18h-4v6zM12 4l4 4-6 6 4 4 6-6 4 4V4H12z" fill="#1a44a1"/></svg>'
    );
}
