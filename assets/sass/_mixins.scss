/* =========================================================================
   Mixins
   ========================================================================= */

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: unquote(map_get($breakpoints, $width));
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@mixin responsive-ratio($x, $y) {
    $padding: ($y / $x) * 100;
    padding-bottom: unquote(decimal-round($padding, 1, ceil) + '%');
}

@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

@mixin on-interact {
    &:active,
    &:focus,
    &:hover {
        @content;
    }
}

// Mixin printing a linear-gradient as well as a plain color fallback
// @access public
// @param {String | List | Angle} $direction - Linear gradient direction
// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
    @if is-direction($direction) == false {
        $color-stops: (
            $direction,
            $color-stops
        );
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@mixin font-and-leading($fontSize, $leading) {
    font-size: $fontSize;
    line-height: relative-line-height($fontSize, $leading);
}

// layout helper: used within a containing element
// to center it according to the grid
@mixin responsiveGutter($skipMargins: false) {
    $defaultGutter: map-get($gutters, 'default');
    @if not $skipMargins {
        margin-left: $defaultGutter;
        margin-right: $defaultGutter;
    }
    width: calc(100% - #{$defaultGutter * 2});

    @each $device, $gutter in $gutters {
        @if map-has-key($breakpoints, $device) {
            @include mq($device) {
                @if not $skipMargins {
                    margin-left: $gutter;
                    margin-right: $gutter;
                }
                width: calc(100% - #{$gutter * 2});
            }
        }
    }

    @media screen and (min-width: $widestScreen) {
        // eg. 80% of the max
        width: #{$widestScreen / 100 * 80};
        @if not $skipMargins {
            height: 100%;
            margin-left: auto;
            margin-right: auto;
        }
    }
}

@mixin poppins() {
    font-family: 'Poppins', arial, sans-serif;
}

@mixin roboto() {
    font-family: 'Roboto', arial, sans-serif;
}

@mixin disabledBtn() {
    background-color: grey !important;
    @include on-interact {
        background-color: grey !important;
    }
}

@mixin bordered() {
    border: 1px solid rgba(202, 202, 202, 0.5);
}

@mixin underlined() {
    content: '';
    display: block;
    width: 80px;
    padding-top: 10px;
    border-bottom: 3px solid;
}
