// layout helper: used within a containing element
// to center it according to the grid

@mixin responsiveGutter() {
    $defaultGutter: map-get($gutters, "default");
    margin-left: $defaultGutter;
    margin-right: $defaultGutter;
    width: calc(100% - #{$defaultGutter * 2});

    @each $device, $gutter in $gutters {
        @if map-has-key($breakpoints, $device) {
            @include mq($device) {
                margin-left: $gutter;
                margin-right: $gutter;
                width: calc(100% - #{$gutter * 2});
            }
        }
    }

    @media screen and (min-width: 1200px) {
        width: $maxInnerWidth;
        margin-left: auto;
        margin-right: auto;
        height: 100%;
    }
}

.inner {
    @include responsiveGutter();
}

.inner--wide-only {
    @include mq('tablet') {
        @include responsiveGutter();
    }
}

// @TODO put this somewhere better
main {
    transition: all 0.3s ease-in-out;
}

.grid {
    display: flex;
    align-items: center;

    > .grid__item {
        flex-grow: 1;
        flex-shrink: 0;
        flex-basis: 0;
        margin-top: 0;
    }

    &.grid--equal {
        align-items: stretch;
    }

    &.grid--top {
        align-items: flex-start;
    }


    &.grid--wide-only {
        @include mq('tablet', 'max') {
            display: block;
            margin-left: 0 !important;
            > .grid__item {
                max-width: 100% !important;
                margin-left: 0 !important;
            }
        }
    }

    $paddedGridGutter: 9px; // arbitrary

    &.grid--padded {
        margin-left: -$paddedGridGutter;

        > .grid__item {
            margin-left: $paddedGridGutter;
            margin-bottom: $spacingUnit;
        }
    }

    &.grid--2-up,
    &.grid--3-up {
        flex-wrap: wrap;
    }

    &.grid--2-up {
        > .grid__item {
            flex-basis: 50%;
        }

        &.grid--padded {
            > .grid__item {
                flex-basis: calc(50% - #{$paddedGridGutter});
                max-width: calc(50% - #{$paddedGridGutter});
            }
        }
    }

    &.grid--3-up {
        > .grid__item {
            flex-basis: 33%;
        }

        &.grid--padded {
            > .grid__item {
                flex-basis: calc(33.33333% - #{$paddedGridGutter});
                max-width: calc(33.33333% - #{$paddedGridGutter});
            }
        }
    }
}


.grid__item__inner {
    position: relative;
    height: 100%;
}

.grid__item__poster {
    display: block;
}

.grid__item__title {
    position: absolute;
    left: $spacingUnit * 1.5;
    bottom: $spacingUnit * 1.5;

    &.grid__item__title--top {
        top: $spacingUnit;
        bottom: auto;
    }

    // cribbed from ionicons
    span:last-child:after {
        content: "\f10a";
        font-family: "Ionicons";
        margin-left: 5px;
    }
}


.overlay {
    position: fixed;
    margin: 0;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(51, 51, 51, 0.7);
    z-index: 10;
    display: none;

    &.overlay--visible {
        display: block;
    }

    .overlay__close {
        position: absolute;
        top: 20px;
        right: 20px;
        border-radius: 100%;
        width: 50px;
        height: 50px;
        display: block;
        border: 2px solid #ffffff;
        text-align: center;

        @include on-interact {
            cursor: pointer;
            background-color: rgba(255, 255, 255, 0.2);
            i {
                color: #ffffff;
            }
        }

        i {
            font-size: 62px;
            margin-top: -10px;
            display: block;
            color: palette('soft-grey');
        }
    }

}

.is-on-top {
    z-index: 100;
}