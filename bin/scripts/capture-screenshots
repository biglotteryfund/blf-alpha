#!/usr/bin/env node
require('dotenv').config();

const puppeteer = require('puppeteer');
const devices = require('puppeteer/DeviceDescriptors');


const { flatMap } = require('lodash');
const del = require('del');
const filenamify = require('filenamify');
const makeDir = require('make-dir');
const pLimit = require('p-limit');

const BASE_URL = process.env.TEST_URL;
if (!BASE_URL) {
    throw new Error('Must define TEST_URL environment variable');
}

const pagesToTest = ['/home', '/over10k', '/under10k'];
const devicesToTest = ['iPad landscape', 'Nexus 6P', 'iPhone 5'];

const screenshotsPath = './screenshots';

makeDir.sync(screenshotsPath);
del.sync(`${screenshotsPath}/*`);

function capture(urlPath, deviceName) {
    return puppeteer.launch({ dumpio: true, args: ['--no-sandbox'] }).then(async browser => {
        const page = await browser.newPage();
        await page.emulate(devices[deviceName]);
        await page.goto(`${BASE_URL}${urlPath}`, { waitUntil: ['networkidle0'] });
        const filename = filenamify(`Page - ${urlPath} - ${deviceName} - ${new Date().toISOString()}.jpg`);
        await page.screenshot({
            fullPage: true,
            type: 'jpeg',
            quality: 80,
            path: `${screenshotsPath}/${filename}`
        });
        await browser.close();
    });
}

const limit = pLimit(1);
const promises = flatMap(pagesToTest, urlPath => {
    return devicesToTest.map(deviceName => {
        return limit(() => capture(urlPath, deviceName));
    });
});

Promise.all(promises).then(result => {
    console.log(result);
});
