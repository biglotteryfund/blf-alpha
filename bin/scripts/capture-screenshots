#!/usr/bin/env node
require('dotenv').config();

const fs = require('fs');
const path = require('path');
const assert = require('assert');
const puppeteer = require('puppeteer');
const del = require('del');

const DEST_PATH = path.join(__dirname, '../../screenshots');

const FILE_FORMAT = 'png';

const SIZES_TO_CAPTURE = {
    small: {
        width: 414,
        height: 736
    },
    medium: {
        width: 768,
        height: 1024
    },
    large: {
        width: 1024,
        height: 768
    }
};

function urlPathToSlug(urlPath, size) {
    const urlSlug = urlPath.substring(1).replace('/', '-');
    const dateSlug = new Date().toISOString();
    const sizeSlug = size ? `${size.width}x${size.height}` : '';
    const parts = [urlSlug, sizeSlug, dateSlug].filter(_ => _).join('-');
    return `${parts}.${FILE_FORMAT}`;
}

const TEST_URL = process.env.TEST_URL;
if (!TEST_URL) {
    throw new Error('Must define TEST_URL environment variable');
}

del.sync([`${DEST_PATH}/*.${FILE_FORMAT}`]);
puppeteer.launch({ dumpio: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] }).then(browser => {
    function capturePageSizes(urlPath, size) {
        const url = `${TEST_URL}${urlPath}`;
        return browser.newPage().then(page => {
            return page.goto(url, { waitUntil: 'networkidle' }).then(() => {
                const screenshotFilename = urlPathToSlug(urlPath, size);
                const screenshotFullPath = `${DEST_PATH}/${screenshotFilename}`;
                return page.setViewport(size).then(() => {
                    return page.screenshot({ path: screenshotFullPath, fullPage: true }).then(() => {
                        assert(fs.existsSync(screenshotFullPath));
                        console.log(`${screenshotFullPath} saved ðŸŽ‰ `);
                        return page.close();
                    });
                });
            });
        });
    }

    const promises = [
        // Homepage
        capturePageSizes('/home', SIZES_TO_CAPTURE.small),
        capturePageSizes('/home', SIZES_TO_CAPTURE.medium),
        capturePageSizes('/home', SIZES_TO_CAPTURE.large),
        // Under 10k
        capturePageSizes('/under10k', SIZES_TO_CAPTURE.small),
        capturePageSizes('/under10k', SIZES_TO_CAPTURE.medium),
        capturePageSizes('/under10k', SIZES_TO_CAPTURE.large),
        // Over10k
        capturePageSizes('/over10k', SIZES_TO_CAPTURE.small),
        capturePageSizes('/over10k', SIZES_TO_CAPTURE.medium),
        capturePageSizes('/over10k', SIZES_TO_CAPTURE.large)
    ];

    console.log(promises);

    Promise.all(promises).then(() => {
        console.log('Complete ðŸŽ‰ ');
        browser.close();
    });
});
