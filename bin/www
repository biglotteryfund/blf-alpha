#!/usr/bin/env node
'use strict';
const http = require('http');
const config = require('config');

const NODE_ENV = config.util.getEnv('NODE_ENV');

if (NODE_ENV === 'development') {
    require('dotenv').config();
}

const logger = require('../common/logger').child({ service: 'www' });

const app = require('../server');
const { sequelize } = require('../db/models');

logger.debug(`App environment: ${NODE_ENV}`);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const parsedPort = parseInt(val, 10);
    if (isNaN(parsedPort)) {
        return val;
    } else if (parsedPort >= 0) {
        return parsedPort;
    } else {
        return false;
    }
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

function describeAddressBinding(addr) {
    return typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
}

function describePortBinding() {
    return typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
}

/**
 * Listen on provided port, on all network interfaces.
 * handle specific listen errors with friendly messages
 */
function startServer() {
    server.listen(port);

    server.on('error', function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        switch (error.code) {
            case 'EACCES':
                throw new Error(
                    `${describePortBinding()} requires elevated privileges`
                );
            case 'EADDRINUSE':
                throw new Error(`${describePortBinding()} is already in use`);
            default:
                throw error;
        }
    });

    server.on('listening', function() {
        const msg = `App now running on ${describeAddressBinding(
            server.address()
        )}`;

        logger.debug(msg);

        if (
            NODE_ENV === 'development' &&
            process.env.SHOW_RESTART_NOTIFICATION === 'true'
        ) {
            require('node-notifier').notify({
                title: 'blf-alpha',
                message: msg,
                sound: false,
                wait: false
            });
        }
    });
}

/**
 * Sync database models and start application
 */
sequelize
    .sync()
    .then(function() {
        logger.info('Database sync complete');
        startServer();
    })
    .catch(function(e) {
        logger.warn('Database sync failed', e);
        startServer();
    });

module.exports = server;
