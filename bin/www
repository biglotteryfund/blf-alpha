#!/usr/bin/env node
'use strict';
/* eslint-disable no-console */
const http = require('http');
const config = require('config');

const logger = require('../common/logger').child({
    service: 'www'
});

const app = require('../server');
const { sequelize } = require('../db/models');

logger.debug(`App environment: ${config.util.getEnv('NODE_ENV')}`);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const parsedPort = parseInt(val, 10);
    if (isNaN(parsedPort)) {
        return val;
    } else if (parsedPort >= 0) {
        return parsedPort;
    } else {
        return false;
    }
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

function describeAddressBinding(addr) {
    return typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
}

function describePortBinding() {
    return typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
}

/**
 * Listen on provided port, on all network interfaces.
 * handle specific listen errors with friendly messages
 */
function startServer() {
    server.listen(port);
    server.on('error', function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        switch (error.code) {
            case 'EACCES':
                console.error(
                    `${describePortBinding()} requires elevated privileges`
                );
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(`${describePortBinding()} is already in use`);
                process.exit(1);
                break;
            default:
                throw error;
        }
    });
    server.on('listening', function() {
        logger.debug(
            `App now running on ${describeAddressBinding(server.address())}`
        );
    });
}

/**
 * Sync database models and start application
 */
sequelize
    .sync()
    .then(function() {
        logger.info('Database sync complete');
        startServer();
    })
    .catch(function(e) {
        logger.warn('Database sync failed', e);
        startServer();
    });

module.exports = server;
