#!/usr/bin/env node
'use strict';
const fs = require('fs');
const assert = require('assert');
const AWS = require('aws-sdk');
const unionBy = require('lodash/unionBy');
const has = require('lodash/has');

if (process.env.NODE_ENV === 'development') {
    require('dotenv').config();
}

AWS.config.update({ region: 'eu-west-2' });

const ssm = new AWS.SSM();

const secretDir = has(process.env, 'SECRET_DIR')
    ? process.env.SECRET_DIR
    : '/etc/blf';

const parametersDest = secretDir + '/parameters.json';

const argv = require('yargs').option('environment', {
    alias: 'env',
    default: 'development',
}).argv;

function normaliseParameterName(parameter) {
    parameter.OriginalName = parameter.Name;
    parameter.Name = parameter.Name.replace(/\/Web\/(Global|Test|Prod)\//, '');
    return parameter;
}

/**
 * Get parameters from the parameter store recursively
 * Previous versions of this would only return 50 parameters which
 * could cause issues with deployments when additional parameters were
 * created. This will now allow INFINITE parameters!
 */
const getParametersByPathRecursively = async (ssm, params) => {
    const data = await ssm.getParametersByPath(params).promise();
    let parameters = data.Parameters;

    if (data.NextToken) {
        parameters = [
            ...parameters,
            ...(await getParametersByPathRecursively(ssm, { ...params, NextToken: data.NextToken }))
        ];
    }

    return parameters;
};


function getParametersForEnvironment(environment) {
    return new Promise((resolve) => {
        let envVars = {
            Path: environment === 'production'
                ? '/Web/Prod' : environment === 'development'
                    ? '/Web/Dev' : '/Web/Test',
        };
        let globalVars = {
            Path: '/Web/Global'
        };

        getParametersByPathRecursively(ssm, envVars).then((envVars) =>
        {
            getParametersByPathRecursively(ssm, globalVars).then((globalVars) => {
                const combinedParameters = unionBy(
                    envVars.map(normaliseParameterName),
                    globalVars.map(normaliseParameterName),
                    'Name'
                );
                resolve(combinedParameters);
            });
        });
    });
}

console.log('\n', `Fetching parameters for: ${argv.environment}`, '\n');
getParametersForEnvironment(argv.environment)
    .then((parameters) => {
        if (!fs.existsSync(secretDir)) {
            fs.mkdirSync(secretDir);
        }

        fs.writeFileSync(parametersDest, JSON.stringify(parameters, null, 4));
        assert(fs.existsSync(parametersDest));

        console.log('Finished fetching parameters.');
        console.log(`Written to ${parametersDest}`);
    })
    .catch((err) => {
        throw err;
    });
