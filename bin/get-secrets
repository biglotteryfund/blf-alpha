#!/usr/bin/env node
'use strict';
/* eslint-disable no-console */
const fs = require('fs');
const assert = require('assert');
const AWS = require('aws-sdk');
const unionBy = require('lodash/unionBy');

AWS.config.update({ region: 'eu-west-2' });

const ssm = new AWS.SSM();

const etcDir = '/etc/blf';
const parametersDest = etcDir + '/parameters.json';

const argv = require('yargs').option('environment', {
    alias: 'env',
    default: 'development'
}).argv;

function normaliseParameterName(parameter) {
    parameter.OriginalName = parameter.Name;
    parameter.Name = parameter.Name.replace(/\/Web\/(Global|Test|Prod)\//, '');
    return parameter;
}

async function getParametersForPath(path) {
    console.log(`Fetching ${path} parameters`);
    let nextToken = null;
    let parameters = [];
    do {
        const result = await ssm
            .getParametersByPath({
                NextToken: nextToken,
                Path: path,
                Recursive: true,
                WithDecryption: true
            })
            .promise();

        parameters = parameters.concat(result.Parameters);

        if (result.NextToken) {
            nextToken = result.NextToken;
        } else {
            nextToken = null;
        }
    } while (nextToken);

    return parameters.map(normaliseParameterName);
}

async function getParameters(environment) {
    const [globalParameters, environmentParameters] = await Promise.all([
        getParametersForPath('/Web/Global'),
        getParametersForPath(
            environment === 'production' ? '/Web/Prod' : '/Web/Test'
        )
    ]);

    /**
     * Take union of /Web/Global and /Web/$Environment parameters
     * Favour environment specific parameters over global ones
     */
    return unionBy(environmentParameters, globalParameters, 'Name');
}

console.log(`\nFetching for ${argv.environment} environment`);
getParameters(argv.environment)
    .then(parameters => {
        if (!fs.existsSync(etcDir)) {
            fs.mkdirSync(etcDir);
        }

        fs.writeFileSync(parametersDest, JSON.stringify(parameters, null, 2));
        assert(fs.existsSync(parametersDest));

        console.log(
            `${parameters.length} parameters written to ${parametersDest}`
        );
    })
    .catch(err => {
        console.log(err, err.stack);
        process.exit(1);
    });
