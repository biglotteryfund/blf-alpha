#!/usr/bin/env node
'use strict';
const fs = require('fs');
const assert = require('assert');
const AWS = require('aws-sdk');
const chunk = require('lodash/chunk');
const flatten = require('lodash/flatten');
const partition = require('lodash/partition');
const unionBy = require('lodash/unionBy');
const has = require('lodash/has');

if (process.env.NODE_ENV === 'development') {
    require('dotenv').config();
}

AWS.config.update({ region: 'eu-west-2' });

const ssm = new AWS.SSM();

const secretDir = has(process.env, 'SECRET_DIR')
    ? process.env.SECRET_DIR
    : '/etc/blf';

const parametersDest = secretDir + '/parameters.json';

const argv = require('yargs').option('environment', {
    alias: 'env',
    default: 'development'
}).argv;

/**
 * Get Secrets
 * `describeParameters` returns up to **50** items but `getParameters`
 * will only return **10** items at a time so to get everything we
 * need we must chunk up our list of parameters and fetch them
 * in batches of 10 parameters at a time.
 */
function getParametersInChunks(parameterNames) {
    // https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_GetParameters.html#API_GetParameters_RequestSyntax
    const parameterChunks = chunk(parameterNames, 10);
    return parameterChunks.map(names => {
        return new Promise((resolve, reject) => {
            ssm.getParameters(
                {
                    Names: names,
                    WithDecryption: true
                },
                function(err, data) {
                    if (err) {
                        reject(err);
                    }
                    resolve(data.Parameters);
                }
            );
        });
    });
}

function normaliseParameterName(parameter) {
    parameter.OriginalName = parameter.Name;
    parameter.Name = parameter.Name.replace(/\/Web\/(Global|Test|Prod)\//, '');
    return parameter;
}

function getParametersForEnvironment(environment) {
    return new Promise((resolve, reject) => {
        const describeParametersOpts = {
            // https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribeParameters.html#EC2-DescribeParameters-request-MaxResults
            MaxResults: 50,
            ParameterFilters: [
                {
                    Key: 'Path',
                    Option: 'Recursive',
                    Values: [
                        '/Web/Global',
                        environment === 'production' ? '/Web/Prod' : '/Web/Test'
                    ]
                }
            ]
        };

        ssm.describeParameters(describeParametersOpts, function(err, data) {
            if (err) {
                reject(err);
            }

            const parameterNames = data.Parameters.map(_ => _.Name);
            Promise.all(getParametersInChunks(parameterNames))
                .then(results => flatten(results))
                .then(allParameters => {
                    if (parameterNames.length !== allParameters.length) {
                        throw new Error(
                            "Number of results doesn't match the amount requested"
                        );
                    }

                    const [
                        rawGlobalParameters,
                        rawEnvironmentParameters
                    ] = partition(allParameters, parameter => {
                        return /^\/Web\/Global/.test(parameter.Name);
                    });

                    const globalParameters = rawGlobalParameters.map(
                        normaliseParameterName
                    );
                    const environmentParameters = rawEnvironmentParameters.map(
                        normaliseParameterName
                    );

                    /**
                     * Take union of /Web/Global and /Web/$Environment parameters
                     * Favour environment specific parameters over global ones
                     */
                    const combinedParameters = unionBy(
                        environmentParameters,
                        globalParameters,
                        'Name'
                    );
                    resolve(combinedParameters);
                });
        });
    });
}

console.log('\n', `Fetching parameters for: ${argv.environment}`, '\n');
getParametersForEnvironment(argv.environment)
    .then(parameters => {
        if (!fs.existsSync(secretDir)) {
            fs.mkdirSync(secretDir);
        }

        fs.writeFileSync(parametersDest, JSON.stringify(parameters, null, 4));
        assert(fs.existsSync(parametersDest));

        console.log('Finished fetching parameters.');
        console.log(`Written to ${parametersDest}`);
    })
    .catch(err => {
        throw err;
    });
