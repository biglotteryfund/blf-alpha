#!/usr/bin/env node
'use strict';

const path = require('path');
const _ = require('lodash');
const htmlToText = require('html-to-text');
const AWS = require('aws-sdk');
const sqlite3 = require('sqlite3').verbose();
const csv = require('csvtojson');

const SES = new AWS.SES({
    apiVersion: '2010-12-01',
    region: 'eu-west-1',
});

const { generateHtmlEmail } = require('../common/mail');

const argv = require('yargs')
    .alias('m', 'mode')
    .describe(
        'm',
        'What mode this script should run in. One of `database`, `send` or `template`.'
    )
    .alias('t', 'template')
    .describe('t', 'Pass the name of a template to use')
    .alias('d', 'database')
    .describe('d', 'Pass the filename of a database to use')
    .alias('c', 'csv')
    .describe('c', 'Pass the filename of a CSV file with a `username` column of email addresses')
    .demandOption(['m', 'd'])
    .help('h')
    .alias('h', 'help').argv;

const mode = argv.mode;
const emailTemplate = argv.template;
const dbPath = argv.database;
const csvPath = argv.csv;

if (mode === 'send' && !emailTemplate) {
    throw new Error(
        'You must provide the name of a template to use for this email'
    );
} else if (mode === 'template' && !emailTemplate) {
    throw new Error('You must provide a template name to create');
} else if (mode === 'database' && !csvPath) {
    throw new Error('You must provide a CSV file of email addresses to store');
}

if (!argv.d) {
    throw new Error('You must provide the path to a database file (-d or --database)');
}

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        throw new Error(err);
    }
    console.log('Connected to the bulk emails database.');
});

// Email configuration
const SENDS_PER_SECOND = 14; // SES limit for our account
const EMAIL_SOURCE = 'noreply@blf.digital';
const EMAIL_SUBJECT =
    'Important update about your The National Lottery Community Fund application';

// Send a pre-templated email to an array of senders (max 50)
const sendBulkEmail = (emails) => {
    return SES.sendBulkTemplatedEmail({
        Destinations: [
            {
                Destination: {
                    BccAddresses: emails,
                },
            },
        ],
        Source: EMAIL_SOURCE,
        Template: emailTemplate,
        DefaultTemplateData: '{}',
    }).promise();
};

// Send a batch of emails every second
const processEmailQueue = (emailAddresses) => {
    // Split the list into chunks matching our limit per-second
    const emailQueue = _.chunk(emailAddresses, SENDS_PER_SECOND);

    // Send a bulk email to $SENDS_PER_SECOND people, every second
    emailQueue.forEach((queue, i) => {
        setTimeout(function () {
            console.log('Sending batch: ' + i);
            sendBulkEmail(queue)
                .then((data) => {
                    console.log('Email was sent to batch', queue, data);

                    if (data.Status[0].Status === 'Success') {
                        // Mark these users as sent
                        db.serialize(() => {
                            const stmt = db.prepare(
                                'UPDATE users SET sent = 1 WHERE email = ?'
                            );
                            queue.forEach((email) => {
                                stmt.run(email);
                            });
                            stmt.finalize();
                        });
                    } else {
                        console.log('Error with this batch');
                    }
                })
                .catch((err) => {
                    throw new Error(err);
                });
        }, i * 1000);
    });
};

// Create an email template in SES for future use based on a Nunjucks template
const createHtmlTemplate = async () => {
    // Make HTML version
    const emailHtml = await generateHtmlEmail({
        template: './controllers/apply/expiries/views/ccsf-closure-email.njk',
        templateData: {},
    });

    // Make plain text version from HTML
    const emailText = htmlToText.fromString(emailHtml, {
        wordwrap: 130,
        hideLinkHrefIfSameAsText: true,
        ignoreImage: true,
    });

    // Register the new template with SES
    return SES.createTemplate({
        Template: {
            TemplateName: emailTemplate,
            SubjectPart: EMAIL_SUBJECT,
            TextPart: emailText,
            HtmlPart: emailHtml,
        },
    }).promise();
};

if (mode === 'send') {
    // Look up users who haven't been emailed yet
    db.all('SELECT * FROM users WHERE sent = 0', [], (err, rows) => {
        if (err) {
            throw new Error(err);
        }
        const emailAddresses = rows.map((_) => _.email);
        // Start sending the emails
        processEmailQueue(emailAddresses);
    });
} else if (mode === 'template') {
    // Create an HTML email template and store it in AWS SES for future use
    createHtmlTemplate()
        .then((data) => {
            console.log(
                'Template was successfully created with the name ' +
                    emailTemplate,
                data
            );
        })
        .catch((err) => {
            throw new Error(err);
        });
} else if (mode === 'database') {
    // Convert a CSV file of email addresses into a database
    csv()
        .fromFile(csvPath)
        .then((users) => {
            // Create a database and insert user records
            db.serialize(() => {
                db.run('DROP TABLE IF EXISTS users');
                db.run('CREATE TABLE users("email" TEXT, "sent" INTEGER)');
                const stmt = db.prepare('INSERT INTO users VALUES (?, ?)');
                users.forEach((user) => {
                    stmt.run(user.username, 0);
                });
                stmt.finalize();
            });
            console.log(
                `Database created and populated with ${users.length} email addresses`
            );
            db.close();
        });
} else {
    console.log('Unknown command options.');
}
