#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const config = require('config');
const { forEach, sortBy } = require('lodash');

const { generateUrlList, makeBehaviourItem } = require('../modules/cloudfront');
const routes = require('../controllers/routes');
const cloudfrontDistributions = require('../config/app/distributions');

// lookup cookies from app config
const cookies = config.get('cookies');
const cookiesInUse = Object.keys(cookies).map(k => cookies[k]);

/**
 * Generate Cloudfront behaviours
 * construct array of behaviours from a URL list
 */
function generateBehaviours(distribution) {
    const urlsToSupport = generateUrlList(routes);

    const customBehaviours = [
        makeBehaviourItem({
            origin: 'legacy',
            originServer: distribution.origins.legacy,
            pathPattern: '/~/*',
            isPostable: true,
            cookiesInUse: cookiesInUse
        })
    ];

    const primaryBehaviours = urlsToSupport.map(url => {
        return makeBehaviourItem({
            origin: 'newSite',
            originServer: distribution.origins.newSite,
            pathPattern: url.path,
            isPostable: url.isPostable,
            queryStringWhitelist: url.queryStrings,
            cookiesInUse: cookiesInUse
        });
    });

    return [].concat(customBehaviours).concat(sortBy(primaryBehaviours, 'PathPattern'));
}

// for each cloudfront distribution, generate a config and store it
forEach(cloudfrontDistributions, (distribution, distributionName) => {
    console.log(`Creating Cloudfront configuration for the "${distributionName}" distribution.`);

    const defaultBehaviour = makeBehaviourItem({
        origin: 'newSite',
        originServer: distribution.origins.newSite,
        isPostable: true,
        cookiesInUse: cookiesInUse
    });

    const behaviours = generateBehaviours(distribution);

    const confData = {
        DefaultCacheBehavior: defaultBehaviour,
        CacheBehaviors: {
            Items: behaviours,
            Quantity: behaviours.length
        }
    };

    console.log(`Adding ${behaviours.length} URLs routing for "${distributionName}" distribution`);

    try {
        const confPath = path.join(__dirname, `../config/cloudfront/${distributionName}.json`);
        fs.writeFileSync(confPath, JSON.stringify(confData, null, 4));
        console.log(`An updated config for the "${distributionName}" distribution was saved in ${confPath}`);
    } catch (err) {
        return console.error('Error saving config', err);
    }
});
