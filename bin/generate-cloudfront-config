#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const config = require('config');
const { sortBy } = require('lodash');

const { generateUrlList, makeBehaviourItem } = require('../modules/cloudfront');
const routes = require('../controllers/routes');
const CF_CONFIGS = require('../config/app/distributions');

// make a list of every URL we need to serve
// across all origins
const urlsToSupport = generateUrlList(routes);

// lookup cookies from app config
const cookies = config.get('cookies');
const cookiesInUse = Object.keys(cookies).map(k => cookies[k]);

// construct array of behaviours from a URL list
// eg. route them to the relevant origins
// based on the distribution (test/live)
const generateBehaviours = (distribution, environment) => {
    let behaviours = [];
    for (let origin in urlsToSupport) {
        let links = urlsToSupport[origin];
        if (links.length > 0) {
            console.log(
                `Adding ${
                    links.length
                } URLs routing to "${origin}" to config for "${environment}" distribution`
            );
            // get name of origin server (for live/test)
            let originServer = distribution.origins[origin];
            links.forEach(url => {
                behaviours.push(
                    makeBehaviourItem({
                        origin: origin,
                        originServer: originServer,
                        pathPattern: url.path,
                        isPostable: url.isPostable,
                        queryStringWhitelist: url.queryStrings,
                        cookiesInUse: cookiesInUse
                    })
                );
            });
        }
    }

    // sort by path (to make diffing easier)
    behaviours = sortBy(behaviours, 'PathPattern');
    return behaviours;
};

// for each cloudfront distribution, generate a config and store it
for (let environment in CF_CONFIGS) {
    console.log(
        `Creating Cloudfront configuration for the "${environment}" distribution.`
    );
    const distribution = CF_CONFIGS[environment];
    const behaviours = generateBehaviours(distribution, environment);

    try {
        const confPath = path.join(__dirname, `../config/cloudfront/${environment}.json`);
        const confData = JSON.stringify(behaviours, null, 4);
        fs.writeFileSync(confPath, confData);
        console.log(`An updated config for the "${environment}" distribution was saved in ${confPath}`);
    } catch (err) {
        return console.error('Error saving config', err);
    }
}
