#!/usr/bin/env node
'use strict';
require('dotenv').config();
const AWS = require('aws-sdk');
const config = require('config');
const got = require('got');
const prompt = require('prompt');
const { stripIndents } = require('common-tags');
const has = require('lodash/has');

if (!has(process.env, 'TEST_URL') || !has(process.env, 'PROD_URL')) {
    throw new Error(
        'TEST_URL and PROD_URL environment variables must be defined'
    );
}

const argv = require('yargs')
    .boolean('l')
    .alias('l', 'live')
    .describe('l', 'Run this command on the live servers')
    .alias('b', 'build')
    .describe('b', 'Pass a custom build number to deploy')
    .help('h')
    .alias('h', 'help').argv;

let customBuildNumber = argv.build;

const codeDeployEnvs = {
    test: {
        applicationName: 'BLF_WWW',
        deploymentGroupName: 'Test_Fleet',
    },
    live: {
        applicationName: 'BLF_WWW',
        deploymentGroupName: 'Live_Fleet',
    },
};

const CONFIG = {
    s3Bucket: 'blf-deployments',
    filenamePattern: /build-(\d+).zip/,
    codedeploy: argv.l ? codeDeployEnvs.live : codeDeployEnvs.test,
    githubRepo: 'biglotteryfund/blf-alpha',
};

// create AWS SDK instance
const credentials = new AWS.SharedIniFileCredentials({ profile: 'default' });
AWS.config.update({ region: config.get('aws.region') });
AWS.config.credentials = credentials;
const codedeploy = new AWS.CodeDeploy();

// do we have a build number?
if (customBuildNumber) {
    lookupRevisionAndDeploy(customBuildNumber); // try to deploy it!
} else {
    // ask for one instead
    // fetch recent revisions from TEST (eg. to promote to live or re-deploy)
    // present past revisions to the user
    codedeploy
        .listApplicationRevisions({
            applicationName: codeDeployEnvs.test.applicationName,
            deployed: 'ignore',
            s3Bucket: CONFIG.s3Bucket,
            sortBy: 'registerTime',
            sortOrder: 'descending',
        })
        .promise()
        .then((data) => {
            console.log('Listing the most recent revisions on TEST:\n');
            let revisions = data.revisions.slice(0, 10);
            let validDeploys = [];
            revisions.forEach((r) => {
                let id = r.s3Location.key;
                let number = id.match(CONFIG.filenamePattern);
                if (number && number[1]) {
                    validDeploys.push(parseInt(number[1]));
                    console.log(`\t• Build #${number[1]}`);
                }
            });

            // prompt to ask which revision to deploy
            let promptSchema = {
                description: `\nWhich revision would you like to deploy to ${CONFIG.codedeploy.applicationName}?`,
                name: 'revisionId',
                type: 'integer',
                message: 'Please supply a valid deploy ID',
                required: true,
            };

            prompt.start();

            // deploy a known revision
            prompt.get(promptSchema, (err, result) => {
                let typedId = result.revisionId;
                if (validDeploys.indexOf(typedId) !== -1) {
                    // we know this is valid
                    deployRevision(typedId);
                } else {
                    // not sure about this, look it up
                    console.log("That ID wasn't in the list, looking it up...");
                    lookupRevisionAndDeploy(typedId);
                }
            });
        })
        .catch((err) => {
            console.error('Error fetching revisions', {
                error: err,
            });
        });
}

// make JSON data for deploy config
function createDeploymentConf(id) {
    return {
        applicationName: CONFIG.codedeploy.applicationName,
        autoRollbackConfiguration: {
            enabled: true,
            events: ['DEPLOYMENT_FAILURE'],
        },
        deploymentConfigName: 'CodeDeployDefault.OneAtATime',
        deploymentGroupName: CONFIG.codedeploy.deploymentGroupName,
        description: 'Automated deploy',
        fileExistsBehavior: 'OVERWRITE',
        ignoreApplicationStopFailures: false,
        revision: {
            revisionType: 'S3',
            s3Location: {
                bucket: CONFIG.s3Bucket,
                bundleType: 'zip',
                key: `build-${id}.zip`,
            },
        },
        updateOutdatedInstancesOnly: false,
    };
}

function verifyCommitsToDeploy() {
    return new Promise((resolve, reject) => {
        return Promise.all([
            got(`${process.env.TEST_URL}/status`).json(),
            got(`${process.env.PROD_URL}/status`).json(),
        ])
            .then(function ([test, production]) {
                console.log(stripIndents`

                    The following changes will be deployed:
                  
                    ${`https://github.com/${CONFIG.githubRepo}/compare/${production.COMMIT_ID}...${test.COMMIT_ID}`}
                `);

                prompt.start();

                prompt.get(
                    {
                        description: `Are you sure you want to push the above commits live?`,
                        name: 'yesno',
                        type: 'string',
                        pattern: /y[es]*|n[o]?/,
                        message: 'Please answer the question properly',
                        required: true,
                    },
                    (err, result) => {
                        if (['y', 'yes'].indexOf(result.yesno) !== -1) {
                            resolve();
                        } else {
                            reject('Bailing out!');
                        }
                    }
                );
            })
            .catch((err) => {
                reject(err);
            });
    });
}

// trigger the deploy itself
function pushOutDeploy(env, id) {
    console.log(
        `Attempting to deploy revision ${id} to environment ${env}, please wait…`
    );

    const deployParams = createDeploymentConf(id);

    codedeploy
        .createDeployment(deployParams)
        .promise()
        .then(() => {
            console.log(
                'Deployment started, check Slack or the AWS console to monitor the deployment.'
            );
        })
        .catch((err) => {
            console.error('Error creating deployment', {
                buildId: id,
                error: err,
            });
        });
}

// do a final check about commits
function deployRevision(id) {
    let env = argv.l ? 'PRODUCTION' : 'TEST';

    // if we're deploying to PROD, look up the commits this will push live
    if (env === 'PRODUCTION') {
        verifyCommitsToDeploy()
            .then(() => {
                pushOutDeploy(env, id);
            })
            .catch((err) => {
                throw err;
            });
    } else {
        pushOutDeploy(env, id);
    }
}

// lookup a known revision on TEST
function getRevision(id) {
    return codedeploy
        .getApplicationRevision({
            applicationName: codeDeployEnvs.test.applicationName,
            revision: {
                revisionType: 'S3',
                s3Location: {
                    bucket: CONFIG.s3Bucket,
                    bundleType: 'zip',
                    key: `build-${id}.zip`,
                },
            },
        })
        .promise();
}

function lookupRevisionAndDeploy(id) {
    getRevision(id)
        .then(() => {
            console.log('Found your revision ID! Deploying it now...');
            deployRevision(id);
        })
        .catch(() => {
            console.error("Error! That ID didn't exist. Sorry :(");
        });
}
